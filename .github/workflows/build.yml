name: Build GUI (GTK + CMake)

on:
  push:
  pull_request:

permissions:
  contents: read

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Check out
        uses: actions/checkout@v4

      # ---------- Linux ----------
      - name: Install deps (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libgtk-3-dev cmake ninja-build
      - name: Configure (Ubuntu)
        if: runner.os == 'Linux'
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release
      - name: Build (Ubuntu)
        if: runner.os == 'Linux'
        run: cmake --build build --config Release
      - name: Upload artifact (Ubuntu)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: iceprog_gui-ubuntu
          path: build/iceprog_gui

      # ---------- Windows (MSYS2 / MinGW64 / GTK3) ----------
      - name: Set up MSYS2
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-gtk3
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-pkgconf
            mingw-w64-x86_64-ntldd
            mingw-w64-x86_64-glib2

      - name: Configure (Windows / MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DUSE_GTK=ON

      - name: Build (Windows / MSYS2)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: cmake --build build --config Release

      - name: Bundle runtime DLLs (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          set -e
          APP=iceprog_gui.exe

          mkdir -p dist
          cp build/$APP dist/

          # Copy all dependent DLLs beside the exe (recursively)
          ntldd -R dist/$APP | awk '/=>/ { print $3 }' | sed '/^0x/d' | while read -r dll; do
            if [ -f "$dll" ]; then cp -u "$dll" dist/; fi
          done

          # Ensure the primary GTK DLLs are definitely present
          for f in /mingw64/bin/libgtk-3-0.dll /mingw64/bin/libgdk-3-0.dll; do
            [ -f "$f" ] && cp -u "$f" dist/
          done

          # GLib schemas (needed by GTK apps)
          mkdir -p dist/share/glib-2.0/schemas
          cp /mingw64/share/glib-2.0/schemas/*.xml dist/share/glib-2.0/schemas/
          /mingw64/bin/glib-compile-schemas.exe dist/share/glib-2.0/schemas

          # Verify no unresolved deps remain (fail CI if any "not found")
          if ntldd -R dist/$APP | grep -q "not found"; then
            echo "Some DLLs are still missing:"
            ntldd -R dist/$APP | grep "not found" || true
            exit 1
          fi

      - name: Upload artifact (Windows portable)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: iceprog_gui-windows-portable
          path: dist/** 